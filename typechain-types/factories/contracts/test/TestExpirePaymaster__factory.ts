/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  TestExpirePaymaster,
  TestExpirePaymasterInterface,
} from "../../../contracts/test/TestExpirePaymaster";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IEntryPoint",
        name: "_entryPoint",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "unstakeDelaySec",
        type: "uint32",
      },
    ],
    name: "addStake",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "deposit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "entryPoint",
    outputs: [
      {
        internalType: "contract IEntryPoint",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getDeposit",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum IPaymaster.PostOpMode",
        name: "mode",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "context",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "actualGasCost",
        type: "uint256",
      },
    ],
    name: "postOp",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "unlockStake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "callGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "verificationGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxFeePerGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxPriorityFeePerGas",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct UserOperation",
        name: "userOp",
        type: "tuple",
      },
      {
        internalType: "bytes32",
        name: "userOpHash",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "maxCost",
        type: "uint256",
      },
    ],
    name: "validatePaymasterUserOp",
    outputs: [
      {
        internalType: "bytes",
        name: "context",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "validationData",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "withdrawAddress",
        type: "address",
      },
    ],
    name: "withdrawStake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "withdrawAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdrawTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a0346100d857601f610ab738819003918201601f19168301916001600160401b038311848410176100dd578084926020946040528339810103126100d857516001600160a01b039081811681036100d8576000543360018060a01b0319821617600055604051923391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a36080526109c390816100f4823960805181818161030f015281816103ee015281816104b401528181610547015281816105cc01528181610748015281816107ef015261090e0152f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe6040608081526004908136101561001557600080fd5b600090813560e01c80630396cb60146107bd578063205c287814610719578063715018a6146106b25780638da5cb5b1461068d578063a9a23409146105f0578063b0d691fe146105ad578063bb9fe6bf14610521578063c23a5cea14610484578063c399ec88146103a1578063d0e30db0146102f6578063f2fde38b146102065763f465c77e146100a557600080fd5b34610202576060906003199382853601126101fe5767ffffffffffffffff9481358681116101fa57610160813603928301126101fa576100e3610904565b61012481013591602219018212156101fa5701818101358681116101fa5780360360248301136101fa57806014116101fa5781018190036013190183136101f65779ffffffffffff000000000000000000000000000000000000000061015760586101506038850161097a565b930161097a565b60a01b169083519660209384890191898310908311176101e15750845285875283519584875287518095880152805b8581106101ce575086850186015260d01b7fffffffffffff0000000000000000000000000000000000000000000000000000161790840152601f01601f191682018290030190f35b8881018501518882018801528401610186565b604190634e487b7160e01b6000525260246000fd5b8480fd5b8580fd5b8380fd5b5080fd5b508290346102f25760203660031901126102f2578135916001600160a01b03918284168094036101f657610238610882565b83156102895750506000548273ffffffffffffffffffffffffffffffffffffffff19821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b8280fd5b509181928260031936011261039d576001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691823b1561039857839060248351809581937fb760faf9000000000000000000000000000000000000000000000000000000008352309083015234905af190811561038f575061037c5750f35b610385906108da565b61038c5780f35b80fd5b513d84823e3d90fd5b505050fd5b5050fd5b508290346102f257826003193601126102f25780517f70a0823100000000000000000000000000000000000000000000000000000000815230838201526020816024816001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa92831561047a578493610428575b6020848451908152f35b909192506020903d8211610472575b601f8201601f191683019067ffffffffffffffff8211848310176101e1575060209183918552810103126102f257602092505190838061041e565b3d9150610437565b82513d86823e3d90fd5b509181923461039d57602036600319011261039d576104a1610867565b6104a9610882565b6001600160a01b03807f000000000000000000000000000000000000000000000000000000000000000016803b156101fa57859283602492865197889586947fc23a5cea00000000000000000000000000000000000000000000000000000000865216908401525af190811561038f575061037c5750f35b509181923461039d578260031936011261039d5761053d610882565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691823b1561039857839283918351809581937fbb9fe6bf0000000000000000000000000000000000000000000000000000000083525af190811561038f575061037c5750f35b5034610202578160031936011261020257602090516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b5091903461038c57606036600319011261038c5760038235101561038c5760243567ffffffffffffffff8082116102f257366023830112156102f257818401359081116102f2573691016024011161038c57506020606492610650610904565b519162461bcd60e51b8352820152600d60248201527f6d757374206f76657272696465000000000000000000000000000000000000006044820152fd5b50346102025781600319360112610202576001600160a01b0360209254169051908152f35b823461038c578060031936011261038c576106cb610882565b60006001600160a01b03815473ffffffffffffffffffffffffffffffffffffffff1981168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b509181923461039d578060031936011261039d57610735610867565b61073d610882565b6001600160a01b03807f000000000000000000000000000000000000000000000000000000000000000016803b156101fa57859283604492865197889586947f205c2878000000000000000000000000000000000000000000000000000000008652169084015260243560248401525af190811561038f575061037c5750f35b50829060203660031901126102f25782823563ffffffff8116809103610202576107e5610882565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001693843b156102f257602490845195869384927f0396cb6000000000000000000000000000000000000000000000000000000000845283015234905af190811561038f575061085b575080f35b610864906108da565b80f35b600435906001600160a01b038216820361087d57565b600080fd5b6001600160a01b0360005416330361089657565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b67ffffffffffffffff81116108ee57604052565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016330361093657565b606460405162461bcd60e51b815260206004820152601560248201527f53656e646572206e6f7420456e747279506f696e7400000000000000000000006044820152fd5b359065ffffffffffff8216820361087d5756fea2646970667358221220de99eaaa76e24c127e105cc49ba521fe3ecca51bd3fed8c66a7f3d269403ff0064736f6c63430008110033";

type TestExpirePaymasterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestExpirePaymasterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestExpirePaymaster__factory extends ContractFactory {
  constructor(...args: TestExpirePaymasterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _entryPoint: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestExpirePaymaster> {
    return super.deploy(
      _entryPoint,
      overrides || {}
    ) as Promise<TestExpirePaymaster>;
  }
  override getDeployTransaction(
    _entryPoint: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_entryPoint, overrides || {});
  }
  override attach(address: string): TestExpirePaymaster {
    return super.attach(address) as TestExpirePaymaster;
  }
  override connect(signer: Signer): TestExpirePaymaster__factory {
    return super.connect(signer) as TestExpirePaymaster__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestExpirePaymasterInterface {
    return new utils.Interface(_abi) as TestExpirePaymasterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestExpirePaymaster {
    return new Contract(address, _abi, signerOrProvider) as TestExpirePaymaster;
  }
}
