/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  BLSSignatureAggregator,
  BLSSignatureAggregatorInterface,
} from "../../../../contracts/samples/bls/BLSSignatureAggregator";

const _abi = [
  {
    inputs: [],
    name: "BLS_DOMAIN",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "N",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IEntryPoint",
        name: "entryPoint",
        type: "address",
      },
      {
        internalType: "uint32",
        name: "delay",
        type: "uint32",
      },
    ],
    name: "addStake",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "callGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "verificationGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxFeePerGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxPriorityFeePerGas",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct UserOperation[]",
        name: "userOps",
        type: "tuple[]",
      },
    ],
    name: "aggregateSignatures",
    outputs: [
      {
        internalType: "bytes",
        name: "aggregatedSignature",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "getTrailingPublicKey",
    outputs: [
      {
        internalType: "uint256[4]",
        name: "publicKey",
        type: "uint256[4]",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "callGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "verificationGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxFeePerGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxPriorityFeePerGas",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct UserOperation",
        name: "userOp",
        type: "tuple",
      },
    ],
    name: "getUserOpHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "callGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "verificationGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxFeePerGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxPriorityFeePerGas",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct UserOperation",
        name: "userOp",
        type: "tuple",
      },
    ],
    name: "getUserOpPublicKey",
    outputs: [
      {
        internalType: "uint256[4]",
        name: "publicKey",
        type: "uint256[4]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "callGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "verificationGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxFeePerGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxPriorityFeePerGas",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct UserOperation",
        name: "userOp",
        type: "tuple",
      },
    ],
    name: "userOpToMessage",
    outputs: [
      {
        internalType: "uint256[2]",
        name: "",
        type: "uint256[2]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "callGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "verificationGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxFeePerGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxPriorityFeePerGas",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct UserOperation[]",
        name: "userOps",
        type: "tuple[]",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "validateSignatures",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "callGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "verificationGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxFeePerGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxPriorityFeePerGas",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct UserOperation",
        name: "userOp",
        type: "tuple",
      },
    ],
    name: "validateUserOpSignature",
    outputs: [
      {
        internalType: "bytes",
        name: "sigForUserOp",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60808060405234610016576117a1908161001c8239f35b600080fdfe60806040526004361015610013575b600080fd5b6000803560e01c9081629d9250146100dd57508063275e2d79146100d457806340864431146100cb57806345171159146100c257806357f09b72146100b957806364c530cd146100b0578063a6193531146100a7578063b7620eb41461009e578063c9e525df146100955763e3563a4f1461008d57600080fd5b61000e610860565b5061000e610836565b5061000e6107f9565b5061000e6107cb565b5061000e610684565b5061000e61065e565b5061000e610579565b5061000e610513565b5061000e61019f565b346101175780600319360112610117577fd84c4373167c517e9ccd66803f86d8a4f49e7e1315a7a73b516affea7428f82b60805260206080f35b80fd5b9181601f8401121561000e5782359167ffffffffffffffff831161000e576020808501948460051b01011161000e57565b919082519283825260005b848110610177575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201610156565b90602061019c92818152019061014b565b90565b503461000e5760208060031936011261000e5760043567ffffffffffffffff811161000e576101d290369060040161011a565b916101dc83610b12565b926101ea6040519485610328565b808452601f1992836101fb83610b12565b018360005b8281106102b65750505060005b855181101561026d578061023e61023661022b610268948787610c37565b61014081019061117c565b810190611264565b61024661034a565b918252868201526102578289610c73565b526102628188610c73565b50610c04565b61020d565b6102b2846102a68761027e8a61127a565b8051908401516040805195860192835260208301919091528491015b03908101835282610328565b6040519182918261018b565b0390f35b6102be61122c565b82828a010152018490610200565b50634e487b7160e01b600052604160045260246000fd5b6040810190811067ffffffffffffffff8211176102ff57604052565b6103076102cc565b604052565b6080810190811067ffffffffffffffff8211176102ff57604052565b90601f8019910116810190811067ffffffffffffffff8211176102ff57604052565b60405190610357826102e3565b565b60405190610160820182811067ffffffffffffffff8211176102ff57604052565b604051906103578261030c565b6001600160a01b0381160361000e57565b359061035782610387565b81601f8201121561000e5780359067ffffffffffffffff82116103fb575b604051926103d9601f8401601f191660200185610328565b8284526020838301011161000e57816000926020809301838601378301015290565b6104036102cc565b6103c1565b91906101608382031261000e5761041d610359565b9261042781610398565b84526020810135602085015260408101359167ffffffffffffffff9283811161000e57816104569184016103a3565b6040860152606082013583811161000e57816104739184016103a3565b60608601526080820135608086015260a082013560a086015260c082013560c086015260e082013560e086015261010080830135908601526101208083013584811161000e57826104c59185016103a3565b90860152610140928383013590811161000e576104e292016103a3565b90830152565b602060031982011261000e576004359067ffffffffffffffff821161000e5761019c91600401610408565b503461000e5761054c610525366104e8565b60408051610532816102e3565b369037610546610541826108f3565b611159565b90610f16565b60405190600090825b6002831061056257604084f35b600190825181526020809101920192019190610555565b50600060403660031901126101175760043561059481610387565b816024359163ffffffff831680930361062c576001600160a01b031691823b1561062c576024604051809481937f0396cb60000000000000000000000000000000000000000000000000000000008352600483015234905af1801561061f575b6105fc575080f35b67ffffffffffffffff8111610612575b60405280f35b61061a6102cc565b61060c565b6106276108e6565b6105f4565b5080fd5b6080810192916000915b6004831061064757505050565b60019082518152602080910192019201919061063a565b503461000e576102b2610678610673366104e8565b6108f3565b60405191829182610630565b503461000e5760031960203682011261000e576004359067ffffffffffffffff821161000e576101608260040191833603011261000e576107516106da6106d261014461078595018461117c565b810190610ac3565b916107476107086106ee6106733685610408565b926107036106fb85611159565b913690610408565b610f16565b9161073d604051957febbdac910000000000000000000000000000000000000000000000000000000087526004870190610cad565b6044850190610cd5565b60c4830190610cad565b6020816101048173__$b745eded4b1aee1100521038d570dd85f1$__5af49081156107be575b600091610790575b506111af565b6102b26102a66111fa565b6107b1915060203d81116107b7575b6107a98183610328565b810190610c95565b3861077f565b503d61079f565b6107c66108e6565b610777565b503461000e5760206107f16107df366104e8565b6107eb610541826108f3565b90611057565b604051908152f35b503461000e57602036600319011261000e5760043567ffffffffffffffff811161000e576106786108316102b29236906004016103a3565b6109ed565b503461000e57600036600319011261000e57602060405160008051602061174c8339815191528152f35b503461000e57604036600319011261000e5767ffffffffffffffff60043581811161000e5761089390369060040161011a565b91906024359282841161000e573660238501121561000e57836004013592831161000e57366024848601011161000e5760246108d0940191610def565b005b604051906108df8261030c565b6080368337565b506040513d6000823e3d90fd5b604051906109008261030c565b608080923690376040810151805190919015610921575061019c91506109ed565b600491506001600160a01b0383915116604051928380927fe02afbae00000000000000000000000000000000000000000000000000000000825261c350fa9182156109e0575b60009261097357505090565b803d82116109d9575b6109868184610328565b82019181818403126109d55782601f820112156109d557604051936109aa8561030c565b849282019384116101175750905b8282106109c55750505090565b81518152602091820191016109b8565b8380fd5b503d61097c565b6109e86108e6565b610967565b906040516109fa8161030c565b6080368237809280516080811115610a345760609101605f198101518352603f198101516020840152601f19810151604084015251910152565b606460405162461bcd60e51b815260206004820152601660248201527f6461746120746f6f2073686f727420666f7220736967000000000000000000006044820152fd5b15610a7f57565b606460405162461bcd60e51b815260206004820152601660248201527f424c533a20696e76616c6964207369676e6174757265000000000000000000006044820152fd5b9060408282031261000e5780601f8301121561000e5760405191610ae6836102e3565b82906040810192831161000e57905b828210610b025750505090565b8135815260209182019101610af5565b60209067ffffffffffffffff8111610b2c575b60051b0190565b610b346102cc565b610b25565b90610b4382610b12565b604090610b5282519182610328565b8381528093610b63601f1991610b12565b019160005b838110610b755750505050565b6020908251610b838161030c565b608036823782828601015201610b68565b90610b9e82610b12565b6040610bac81519283610328565b8382528193610bbd601f1991610b12565b019160005b838110610bcf5750505050565b6020908351610bdd816102e3565b8436823782828501015201610bc2565b50634e487b7160e01b600052601160045260246000fd5b6001906000198114610c14570190565b610c1c610bed565b0190565b50634e487b7160e01b600052603260045260246000fd5b9190811015610c5b575b60051b8101359061015e198136030182121561000e570190565b610c63610c20565b610c41565b61019c903690610408565b6020918151811015610c88575b60051b010190565b610c90610c20565b610c80565b9081602091031261000e5751801515810361000e5790565b6000915b60028310610cbe57505050565b600190825181526020809101920192019190610cb1565b6000915b60048310610ce657505050565b600190825181526020809101920192019190610cd9565b91608092610d0e8185810194610cad565b6040938085830152825180945260a08201936020809401916000905b828210610d7e575050505060608184039101528080855193848152019401926000905b838210610d5c57505050505090565b9091929394838282610d716001948a51610cad565b0196019493920190610d4d565b909192969495868282610d946001948c51610cd5565b9799970197960193920190610d2a565b15610dab57565b606460405162461bcd60e51b815260206004820152601e60248201527f424c533a2076616c69646174655369676e617475726573206661696c656400006044820152fd5b91610e0191936106d260408214610a78565b610e0a83610b39565b91610e1484610b94565b9360005b818110610ebb575050506103579291602091610e6160405194859384937f9141376300000000000000000000000000000000000000000000000000000000855260048501610cfd565b038173__$b745eded4b1aee1100521038d570dd85f1$__5af4908115610eae575b600091610e90575b50610da4565b610ea8915060203d81116107b7576107a98183610328565b38610e8a565b610eb66108e6565b610e82565b80610f07610ed5610ed0610f11948688610c37565b610c68565b610ede816108f3565b610ee8848a610c73565b52610ef38389610c73565b50610546610f01848a610c73565b51611159565b6102578289610c73565b610e18565b90610f3290604092838051610f2a816102e3565b369037611057565b610faa82805160209384820152838152610f4b816102e3565b8151809381927fa850a9090000000000000000000000000000000000000000000000000000000083527fd84c4373167c517e9ccd66803f86d8a4f49e7e1315a7a73b516affea7428f82b6004840152846024840152604483019061014b565b038173__$b745eded4b1aee1100521038d570dd85f1$__5af492831561104a575b600093610fd9575b50505090565b803d8211611043575b610fec8184610328565b820191818184031261103f5782601f8201121561103f5781519461100f866102e3565b859282019384116101175750905b8282106110305750505050388080610fd3565b8151815290830190830161101d565b8480fd5b503d610fe2565b6110526108e6565b610fcb565b9061115361106c83516001600160a01b031690565b926020938461110f81840151936040810151838151910120906060810151848151910120608082015160a083015160c08401519160e085015193610120610100870151960151898151910120966040519b8c9a8b019b8c9693909a999895926101209895926001600160a01b036101408a019d168952602089015260408801526060870152608086015260a085015260c084015260e08301526101008201520152565b0391611123601f1993848101835282610328565b5190206040805195860191825260208201949094523093810193909352466060840152919291826080850161029a565b51902090565b6040516111538161116e602082019485610630565b03601f198101835282610328565b903590601e198136030182121561000e570180359067ffffffffffffffff821161000e5760200191813603831361000e57565b156111b657565b606460405162461bcd60e51b815260206004820152600e60248201527f424c533a2077726f6e67207369670000000000000000000000000000000000006044820152fd5b604051906020820182811067ffffffffffffffff82111761121f575b60405260008252565b6112276102cc565b611216565b604051906040820182811067ffffffffffffffff821117611257575b60405260006020838281520152565b61125f6102cc565b611248565b919082604091031261000e576020823592013590565b9061128361122c565b82511561140e575b602090818401918083515193865115611401575b51015192600193845b87518610156112f157916112dc916112e794936112c5888b610c73565b515191856112d38a8d610c73565b51015193611497565b949193909395610c04565b94919290936112a8565b919294509295508080151590816113e8575b50806113e0575b1561139c57600090600160008051602061174c833981519152825b6113525750505060008051602061174c833981519152929181848082819509809309885209900990830152565b8061138e60008051602061174c833981519152611376866113949598969798611718565b9461138382888809611466565b900894958094611738565b9061148a565b919082611325565b6064846040519062461bcd60e51b82526004820152600e60248201527f496e76616c6964206e756d6265720000000000000000000000000000000000006044820152fd5b50600161130a565b60008051602061174c8339815191529150141538611303565b611409610c20565b61129f565b611416610c20565b61128b565b1561142257565b606460405162461bcd60e51b815260206004820152601e60248201527f557365206a6163446f75626c652066756e6374696f6e20696e737465616400006044820152fd5b9060008051602061174c83398151915291820391821161148257565b610357610bed565b9190820391821161148257565b949290919394801580611710575b611705578115806116fd575b6116f4576115596114c06108d2565b9660008051602061174c83398151915280888009808a528809602089015260008051602061174c8339815191526040890195600187528160608b01956001875261150861037a565b98519009948588525190099060008051602061174c8339815191528060208801968488528b519009916020604089019b848d520151900990606087019482865214918215926116e9575b505061141b565b6115616108d2565b9551835161156e90611466565b60008051602061174c8339815191529108865251815161158d90611466565b60008051602061174c83398151915291086020860192818452865160008051602061174c833981519152818009604089019181835260008051602061174c83398151915291099260608901938085526115e590611466565b908060008051602061174c83398151915291099060008051602061174c83398151915291088251825160008051602061174c833981519152910960008051602061174c8339815191529060020961163b90611466565b60008051602061174c833981519152910894519151905160008051602061174c833981519152910961166c85611466565b60008051602061174c833981519152910860008051602061174c83398151915291099151905160008051602061174c83398151915291096116ac90611466565b60008051602061174c83398151915291089351909392600160008051602061174c833981519152910960008051602061174c833981519152910990565b141590503880611552565b91945050929190565b5085156114b1565b509392506001919050565b5082156114a5565b8115611722570490565b634e487b7160e01b600052601260045260246000fd5b818102929181159184041417156114825756fe30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47a264697066735822122027ceb58d8256ea5be8aac7c34800e845013b424042504df771ea3b292f51ec5064736f6c63430008110033";

type BLSSignatureAggregatorConstructorParams =
  | [
      linkLibraryAddresses: BLSSignatureAggregatorLibraryAddresses,
      signer?: Signer
    ]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BLSSignatureAggregatorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class BLSSignatureAggregator__factory extends ContractFactory {
  constructor(...args: BLSSignatureAggregatorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(
        _abi,
        BLSSignatureAggregator__factory.linkBytecode(linkLibraryAddresses),
        signer
      );
    }
  }

  static linkBytecode(
    linkLibraryAddresses: BLSSignatureAggregatorLibraryAddresses
  ): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$b745eded4b1aee1100521038d570dd85f1\\$__", "g"),
      linkLibraryAddresses["contracts/samples/bls/lib/BLSOpen.sol:BLSOpen"]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<BLSSignatureAggregator> {
    return super.deploy(overrides || {}) as Promise<BLSSignatureAggregator>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): BLSSignatureAggregator {
    return super.attach(address) as BLSSignatureAggregator;
  }
  override connect(signer: Signer): BLSSignatureAggregator__factory {
    return super.connect(signer) as BLSSignatureAggregator__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BLSSignatureAggregatorInterface {
    return new utils.Interface(_abi) as BLSSignatureAggregatorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BLSSignatureAggregator {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as BLSSignatureAggregator;
  }
}

export interface BLSSignatureAggregatorLibraryAddresses {
  ["contracts/samples/bls/lib/BLSOpen.sol:BLSOpen"]: string;
}
